/*    Copyright (c) 2021, NWH coding, vl. Aron Rescec
 *    All rights reserved
 *
 *    This file is part of the NWH Dynamic Water Physics 2 for Unreal Engine
 *    and is licensed under the Unreal Engine EULA:
 *    https://www.unrealengine.com/en-US/eula/publishing
 */

#pragma once

#include "CoreMinimal.h"
#include "Components/SceneComponent.h"
#include "ShipEngineComponent.generated.h"

UENUM()
enum class ShipEngineState {
	On,
	Off,
	Starting,
	Stopping
};
	
UENUM()
enum class ShipEnginePropRotationDirection {
	Left,
	Right
};

/**
 * SceneComponent that applies thrust, manages engine audio and propeller rotation.
 * Should be attached as a child to UShipComponent.
 */
UCLASS( ClassGroup=(Custom), meta=(BlueprintSpawnableComponent) )
class DWP2_API UShipEngineComponent : public USceneComponent
{
	GENERATED_BODY()

public:	
	UShipEngineComponent();

protected:
	virtual void BeginPlay() override;

public:
	virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;
	
	/**
	 * Sets the throttle value.
	 * 	@param Value throttle value in range [-1, 1].
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	void SetThrottle(float Value);

	/**
	 * Gets the throttle value.
	 * 	@return Value throttle value in range [-1, 1].
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	float GetThrottle() const;

	/**
	 * Gets the RPM as a percentage.
	 * 	@return RPM percentage in relation to max RPM in range [0, 1].
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	float GetRpmPercent();

	/**
	 * Gets the current thrust generated by the engine.
	 * 	@return Thrust in [N * 100]
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	float GetThrust();

	/**
	 * Starts the engine.
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	void StartEngine();

	/**
	 * Stops the engine.
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	void StopEngine();

	/**
	 * Checks if the engine is submerged.
	 * @return True if under water.
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	bool IsSubmerged();

	/**
	 * Gets the ship speed.
	 * @return Ship speed in [cm/s].
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	float GetSpeed();

	/**
	 * Toggles the engine state. If running it stops the engine and vice versa.
	 */
	UFUNCTION(BlueprintCallable, Category = "Engine")
	void StartStop();

	/**
	 * Should the engine be running on BeginPlay?
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	bool IsOn = false;

	/**
	 * Current engine state.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	ShipEngineState State = ShipEngineState::Off;

	/**
	 * Minimum engine RPM.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float MinRPM = 800.0f;

	/**
	 * Maximum engine RPM.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float MaxRPM = 6000.0f;

	/**
	 * Maximum thrust in [N * 100]
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float MaxThrust = 5000.0f;

	/**
	 * Time needed to spin up the engines up to max RPM
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float SpinUpSpeed = 0.5f;

	/**
	 * RPM while the engine is spun using the starter motor.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float StartingRPM = 300.0f;

	/**
	 * Engine starting duration.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float StartDuration = 1.4f;

	/**
	 * Engine stopping duration.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float StopDuration = 0.8f;

	/**
	 * Should thrust be applied when engine is out of water?
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	bool ApplyThrustWhenAboveWater = false;

	/**
	 * Thrust when reversing.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float ReverseThrustCoefficient = 0.5f;

	/**
	 * Max speed that can be achieved with the current propeller pitch [m/s].
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Engine")
	float MaxSpeed = 20.0f;

	/**
	 * Ratio betweent the propeller and engine RPM.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Propeller")
	float PropellerRPMRatio = 1.0f;

	/**
	* Idle volume of the engine
	*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Sound")
	float BaseVolume = 0.2f;

	/**
	 * Idle pitch of the engine
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Sound")
	float BasePitch = 0.5f;

	/**
	 * Volume range of the engine.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Sound")
	float VolumeRange = 0.8f;

	/**
	 * Pitch range of the engine.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Sound")
	float PitchRange = 1.0f;

private:
	void SoundUpdate();

	/**
	 * Engine running audio source.
	 */
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Sound", meta = (AllowPrivateAccess = "True"))
		class UAudioComponent* EngineAudioComponent;

	/**
	 * PrimitiveComponent to which the forces will be applied.
	 */
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Engine", meta = (AllowPrivateAccess = "True"))
		UPrimitiveComponent* SimulatingComponent;

	/**
	 * Mesh representing the propeller.
	 */
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Propeller", meta = (AllowPrivateAccess = "True"))
		UStaticMeshComponent* PropellerStaticMeshComponent;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Engine Values", meta = (AllowPrivateAccess = "True"))
	float InputThrottle = 0;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Engine Values", meta = (AllowPrivateAccess = "True"))
	float RPM = 0;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Engine Values", meta = (AllowPrivateAccess = "True"))
	float Thrust = 0;
	
	float SpinVelocity = 0;
	float StartTime = 0;
	float StopTime = 0;
	float WasOn = false;
};
